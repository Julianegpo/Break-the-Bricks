{"mappings":"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","sources":["assets/utils/Constants.ts","actors/Ball.ts","actors/Bar.ts","actors/BrickManager.ts","actors/FPSViewer.ts","src/script.ts"],"sourcesContent":["export const Constants = {\r\n    KEYDOWN_ARROW_RIGHT: \"ArrowRight\",\r\n    KEYDOWN_ARROW_LEFT: \"ArrowLeft\",\r\n    KEYDOWN_SPACEBAR: \" \"\r\n}","import { Constants } from \"../assets/utils/Constants\";\r\nimport { Actor } from \"./Actor\";\r\nimport { Bar } from \"./Bar\";\r\n\r\nexport class Ball implements Actor {\r\n    position: { x: number; y: number; };\r\n    ctx: CanvasRenderingContext2D;\r\n    speed: { dx: number, dy: number };\r\n    playerBar: Bar;\r\n\r\n    constructor(position, ctx: CanvasRenderingContext2D, playerBar: Bar) {\r\n        this.position = { x: position.x, y: position.y };\r\n        this.ctx = ctx;\r\n        this.speed = { dx: 0, dy: 0 };\r\n        this.playerBar = playerBar;\r\n    }\r\n    update(delta: number, canvasWidth, canvasHeight) {\r\n        // canvas limits\r\n        if (this.position.x + this.speed.dx >= canvasWidth\r\n            || this.position.x + this.speed.dx <= 0)\r\n            this.speed.dx = -this.speed.dx;\r\n        if (this.position.y + this.speed.dy >= canvasHeight\r\n            || this.position.y + this.speed.dy <= 0)\r\n            this.speed.dy = -this.speed.dy;\r\n\r\n        // new bar collider\r\n        if (this.position.x > this.playerBar.position.x\r\n            && this.position.x < this.playerBar.position.x + this.playerBar.width\r\n            && this.position.y > this.playerBar.position.y\r\n            && this.position.y < this.playerBar.position.y + this.playerBar.height) {\r\n            this.speed.dx = 8 * ((this.position.x - (this.playerBar.position.x + 80 / 2)) / 80);\r\n            this.speed.dy = -this.speed.dy;\r\n        }\r\n\r\n        // if ball reaches bottom, game over\r\n        if (this.position.y >= canvasHeight - 10) {\r\n            this.speed.dx = 0;\r\n            this.speed.dy = 0;\r\n        }\r\n\r\n        // ball movement\r\n        this.position.x += this.speed.dx * (delta * 100);\r\n        this.position.y += this.speed.dy * (delta * 100);\r\n    }\r\n    draw(delta: number, ctx: CanvasRenderingContext2D) {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"pink\";\r\n        ctx.fillStyle = \"pink\";\r\n        ctx.arc(this.position.x, this.position.y, 10, 0, Math.PI * 2, true);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n    keyboard_event(key: string) {\r\n        if (key === Constants.KEYDOWN_SPACEBAR) {\r\n            // ball movement\r\n            this.speed.dx = 2;\r\n            this.speed.dy = 4;\r\n        }\r\n    }\r\n}","import { Actor } from \"./Actor\";\r\nimport { Constants } from \"../assets/utils/Constants\";\r\n\r\nexport class Bar implements Actor {\r\n    position: { x: number; y: number; };\r\n    ctx: CanvasRenderingContext2D;\r\n    speed: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(position, ctx: CanvasRenderingContext2D, speed = 0) {\r\n        this.position = { x: position.x, y: position.y };\r\n        this.ctx = ctx;\r\n        this.speed = speed;\r\n        this.width = 80;\r\n        this.height = 15;\r\n    }\r\n    update(delta: number, canvasWidth) {\r\n        let newPosition = this.position.x + (this.speed * delta)\r\n        if (newPosition + 80 <= canvasWidth\r\n            && newPosition >= 0) {\r\n            this.position.x = newPosition;\r\n        }\r\n    }\r\n    draw(delta: number, ctx: CanvasRenderingContext2D) {\r\n        ctx.strokeStyle = \"white\";\r\n        ctx.fillStyle = \"white\";\r\n        ctx.rect(this.position.x, this.position.y, this.width, this.height);\r\n        ctx.fill();\r\n    }\r\n    keyboard_event(key: string) {\r\n        switch (key) {\r\n            case Constants.KEYDOWN_ARROW_RIGHT:\r\n                this.speed = 225;\r\n                break;\r\n            case Constants.KEYDOWN_ARROW_LEFT:\r\n                this.speed = -225;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}","import { Actor } from \"./Actor\";\r\n\r\nexport class BrickManager implements Actor {\r\n    bricks: number[][];\r\n    nrows: number = 5;\r\n    ncols: number = 5;\r\n    padding: number = 1;\r\n    brickWidth: number;\r\n    brickHeight: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    position: { x: number; y: number; };\r\n\r\n    constructor(ctx: CanvasRenderingContext2D) {\r\n        this.ctx = ctx;\r\n        this.bricks = new Array(this.nrows);\r\n        for (let i = 0; i < this.nrows; i++) {\r\n            this.bricks[i] = new Array(this.ncols);\r\n            for (let j = 0; j < this.ncols; j++) {\r\n                this.bricks[i][j] = 1;\r\n            }\r\n        }\r\n    }\r\n    update(delta: number, canvasWidth: number, canvasHeight: number) {\r\n        // check if theres 1 or 0 on the position\r\n        // if [i][j] = 0 -> theres a brick destroyed\r\n        // else [i][j] = 1 -> draw brick \r\n        for (let i = 0; i < this.nrows; i++) {\r\n            for (let j = 0; j < this.ncols; j++) {\r\n                if (this.bricks[i][j] == 1) {\r\n                    this.ctx.strokeStyle = \"yellow\";\r\n                    this.ctx.fillStyle = \"yellow\";\r\n                    this.ctx.rect(\r\n                        (j * (this.brickWidth + this.padding)) + this.padding,\r\n                        (i * (this.brickHeight + this.padding)) + this.padding,\r\n                        this.brickWidth, this.brickHeight\r\n                    );\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    draw(delta: number, ctx: CanvasRenderingContext2D) {\r\n        // check if theres 1 or 0 on the position\r\n        // if [i][j] = 0 -> theres a brick destroyed\r\n        // else [i][j] = 1 -> draw brick \r\n        for (let i = 0; i < this.nrows; i++) {\r\n            for (let j = 0; j < this.ncols; j++) {\r\n                if (this.bricks[i][j] == 1) {\r\n                    this.ctx.strokeStyle = \"yellow\";\r\n                    this.ctx.fillStyle = \"yellow\";\r\n                    this.ctx.rect(\r\n                        (j * (this.brickWidth + this.padding)) + this.padding,\r\n                        (i * (this.brickHeight + this.padding)) + this.padding,\r\n                        this.brickWidth, this.brickHeight\r\n                    );\r\n                    this.ctx.fill();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    keyboard_event(key: string) { }\r\n}","import { Actor } from \"./Actor\";\r\n\r\nexport class FPSViewer implements Actor {\r\n    position: { x: number; y: number; };\r\n    ctx: CanvasRenderingContext2D;\r\n\r\n    constructor(position) {\r\n        this.position = position;\r\n    }\r\n    update(delta: number, canvasWidth: number, canvasHeight: number) { }\r\n    draw(delta: number, ctx: CanvasRenderingContext2D) {\r\n        const fps = (1 / delta).toFixed(2);\r\n        ctx.font = '20px Arial';\r\n        ctx.fillStyle = 'yellow';\r\n        ctx.fillText(`FPS: ${fps}`, this.position.x, this.position.y)\r\n    }\r\n    keyboard_event(key: string) { }\r\n}","import { Ball } from \"../actors/Ball\";\r\nimport { Bar } from \"../actors/Bar\";\r\nimport { BrickManager } from \"../actors/BrickManager\";\r\nimport { FPSViewer } from \"../actors/FPSViewer\";\r\n\r\nwindow.onload = () => {\r\n    // onload setup getting canvas and generating actors\r\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n    let actors = generateActors(ctx, canvas);\r\n\r\n    // render phase\r\n    let lastFrame = 0;\r\n    const render = (time) => {\r\n        let delta = (time - lastFrame) / 1000;\r\n        lastFrame = time;\r\n        actors.forEach((e) => {\r\n            e.update(delta, canvas.width, canvas.height);\r\n        });\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        actors.forEach((e) => {\r\n            e.draw(delta, ctx);\r\n        });\r\n        window.requestAnimationFrame(render);\r\n    };\r\n\r\n    window.requestAnimationFrame(render);\r\n\r\n    // registering keyboard inputs for player movement\r\n    document.body.addEventListener('keydown', (e) => {\r\n        actors.forEach((actor) => {\r\n            actor.keyboard_event(e.key);\r\n        });\r\n    });\r\n}\r\n\r\n// generate the player bar and bricks for game start\r\nfunction generateActors(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) {\r\n    const fpsViewer = new FPSViewer({ x: (canvas.width / 2) - 50, y: canvas.height });\r\n    const playerBar = new Bar({ x: (canvas.width / 2) - 40, y: 450 }, ctx);\r\n    const ball = new Ball({ x: 250, y: 100 }, ctx, playerBar);\r\n    const brickManager = new BrickManager(ctx);\r\n\r\n    return [\r\n        fpsViewer,\r\n        playerBar,\r\n        ball,\r\n        brickManager\r\n    ];\r\n}"],"names":["$6b067ac5b9bd76af$export$a002182e51710d39","$9bd5c5a1af2bf427$export$a83d7c3fa53790c9","constructor","position","ctx","playerBar","this","x","y","speed","dx","dy","update","delta","canvasWidth","canvasHeight","width","height","draw","beginPath","strokeStyle","fillStyle","arc","Math","PI","closePath","fill","keyboard_event","key","$f348a45267fcd837$export$bbc6c6369b38e3d1","newPosition","rect","$3120924c031a7950$export$f4f0b6e436b10515","nrows","ncols","padding","bricks","Array","i","j","brickWidth","brickHeight","$5bb922c1489d4cff$export$13acb86b4b3ca30e","fps","toFixed","font","fillText","window","onload","canvas","document","getElementById","getContext","actors","fpsViewer","ball","brickManager","$0f592d681121713f$var$generateActors","lastFrame","render","time","forEach","e","clearRect","requestAnimationFrame","body","addEventListener","actor"],"version":3,"file":"index.c16be59d.js.map"}